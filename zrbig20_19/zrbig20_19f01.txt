*&---------------------------------------------------------------------*
*&  Include           ZRBIG20_19F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SET_INIT_VALUE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_init_value .
  p_carrid =  'LH'.

  LOOP AT SCREEN.
    IF screen-group1 EQ 'CON'.
      screen-input = 0.
    ELSE.
      screen-input = 1.
      screen-active = 1.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_CONTROL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_control .

  LOOP AT SCREEN.

    CASE 'X'.
      WHEN p_air.
        IF screen-group1 = 'CON' .
          screen-input  = 0.
        ELSEIF screen-group1 = 'FLD'.
          screen-active = 1.
        ENDIF.
      WHEN p_book.
        IF screen-group1 = 'FLD'.
          screen-active  = 0.
        ELSEIF screen-group1 = 'CON'.
          screen-input = 1.
        ENDIF.

      WHEN OTHERS.
    ENDCASE.

    MODIFY SCREEN.

  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_PARAM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_param .
  DATA : ls_sflight TYPE sflight.
  DATA : ls_sbook TYPE sbook.

  CASE 'X'.
    WHEN p_air.

      IF s_fldate-low IS NOT INITIAL.

        SELECT SINGLE *
          INTO CORRESPONDING FIELDS OF ls_sflight
          FROM sflight
          WHERE carrid EQ p_carrid
          AND   fldate EQ s_fldate-low.

        IF ls_sflight IS INITIAL.
          MESSAGE s001(k5) WITH TEXT-e01 DISPLAY LIKE 'E'.
          STOP.
        ENDIF.
      ELSE.
        SELECT SINGLE *
          INTO CORRESPONDING FIELDS OF ls_sflight
          FROM sflight
          WHERE carrid EQ p_carrid.

        IF ls_sflight IS INITIAL.
          MESSAGE s001(k5) WITH TEXT-e01 DISPLAY LIKE 'E'.
          STOP.
        ENDIF.
      ENDIF.
    WHEN p_book.
      IF s_connid-low IS NOT INITIAL.

        SELECT SINGLE *
          INTO CORRESPONDING FIELDS OF ls_sbook
          FROM sbook
          WHERE carrid EQ p_carrid
          AND   connid EQ s_connid-low.

        IF ls_sbook IS INITIAL.
          MESSAGE s001(k5) WITH TEXT-e01 DISPLAY LIKE 'E'.
          STOP.
        ENDIF.
      ELSE.
        SELECT SINGLE *
          INTO CORRESPONDING FIELDS OF ls_sbook
          FROM sbook
          WHERE carrid EQ p_carrid.

        IF ls_sbook IS INITIAL.
          MESSAGE s001(k5) WITH TEXT-e01 DISPLAY LIKE 'E'.
          STOP.
        ENDIF.
      ENDIF.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_SFLIGHT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_sflight_data .

*-- tabix위한 변수 선언
  DATA : lv_tabix TYPE sy-tabix.

  CLEAR : gt_sflight, gs_sflight.

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE gt_sflight
    FROM sflight
    WHERE carrid EQ p_carrid
    AND   fldate IN s_fldate.

  IF gt_sflight IS INITIAL.
    MESSAGE s037(k5) DISPLAY LIKE 'E'.
    STOP.

  ELSE.

*-- Set color code
    LOOP AT gt_sflight INTO gs_sflight.

      lv_tabix  = sy-tabix.
      "위치를 조심해라!!!

      CASE gs_sflight-connid.
        WHEN '0400'.
          gs_sflight-col  = 'C510'. "Green

        WHEN '0401'.
          gs_sflight-col  = 'C710'. "Orange
      ENDCASE.

      MODIFY gt_sflight FROM gs_sflight INDEX lv_tabix TRANSPORTING col.
      "col만 변경해준다.
      "System Field를 쓸 때는 변수에 넣어주고 쓰는 것이 좋다. 바로 쓰는 것보다..

    ENDLOOP.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_SBOOK_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_sbook_data .

*-- tabix를 받아줄 변수 선언
  DATA : lv_tabix TYPE sy-tabix.

  CLEAR : gt_sbook, gs_sbook.
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE gt_sbook
    FROM sbook
    WHERE carrid EQ p_carrid
    AND   connid IN s_connid.

  IF gt_sbook IS INITIAL.
    MESSAGE s037(k5) DISPLAY LIKE 'E'.
    STOP.
  ELSE.

*-- Internal table에 대한 Loop.
    LOOP AT gt_sbook INTO gs_sbook.
      lv_tabix =  sy-tabix.
      "현재 처리하고 있는 index 값 return.

      CASE gs_sbook-smoker.
        WHEN 'X'.
          gs_sbook-pic  = icon_activate.
          gs_sbook-col  = 'C610'.
      ENDCASE.

      " IF gs_sbook-smoker EQ 'X'.
      "    gs_sbook-pic  = icon_activate.
      "    gs_sbook-col  = 'C610'.
      " ENDIF.

      MODIFY gt_sbook FROM gs_sbook INDEX lv_tabix TRANSPORTING pic col.
    ENDLOOP.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  INIT_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM init_screen .

*-- For Field Symbols
  DATA : lv_var(25),
         lv_table_name TYPE dd02l-tabname.
  FIELD-SYMBOLS <fs_tab> TYPE STANDARD TABLE.

  CASE 'X'.
    WHEN p_air.
      lv_table_name = 'SFLIGHT'.
    WHEN p_book.
      lv_table_name = 'SBOOK'.
  ENDCASE.

  PERFORM set_layout.

*-- Call by Value를 통한 Field Catalog 통제.
*      CLEAR : gs_fcat, gt_fcat.
*      PERFORM set_field_catalog
*      USING : 'X' 'PIC'       'SOMKER'   ' '         ' '     ' ',
*              'X' 'CARRID'    'Airline'  ' '         ' '     ' ',
*              'X' 'CONNID'    'Conn'     ' '         ' '     ' ',
*              'X' 'FLDATE'    'FLDATE'   ' '         ' '     ' ',
*              'X' 'BOOKID'    'BOOKID'   ' '         ' '     ' ',
*              ' ' 'CUSTOMID'  'CUSTOMID' ' '         ' '     ' ',
*              ' ' 'SMOKER'    'SMOKER'   'SMOKER'    'SBOOK' 'X'.
*      "key  "fieldname  "coltext  "ref_field "ref_table

  IF go_container IS INITIAL.

    PERFORM create_obj.

    CLEAR : lv_var.
    CONCATENATE 'gt_' lv_table_name  INTO lv_var.
    ASSIGN (lv_var) TO <fs_tab>.

    CALL METHOD go_alv_grid->set_table_for_first_display
      EXPORTING
        i_structure_name              = lv_table_name
        i_save                        = 'A'
        i_default                     = 'X'
        is_layout                     = gs_layout
      CHANGING
        it_outtab                     = <fs_tab>
*       it_fieldcatalog               = gt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.



*    IF gt_sflight IS NOT INITIAL.
*      CALL METHOD go_alv_grid->set_table_for_first_display
*        EXPORTING
*          i_structure_name = 'SFLIGHT'
*          i_save           = 'A'
*          i_default        = 'X'
*          is_layout        = gs_layout
*        CHANGING
*          it_outtab        = gt_sflight.
*
*    ELSEIF gt_sbook IS NOT INITIAL.
*
*
*
*      CALL METHOD go_alv_grid->set_table_for_first_display
*        EXPORTING
*          i_structure_name              = 'SBOOK'
*          i_save                        = 'A'
*          i_default                     = 'X'
*          is_layout                     = gs_layout
*        CHANGING
*          it_outtab                     = gt_sbook
**          it_fieldcatalog               = gt_fcat
*        EXCEPTIONS
*          invalid_parameter_combination = 1
*          program_error                 = 2
*          too_many_lines                = 3
*          OTHERS                        = 4.
*
*    ENDIF.

  ELSE.

    CALL METHOD go_alv_grid->refresh_table_display.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_layout .
  gs_layout-zebra       = 'X'.
  gs_layout-sel_mode    = 'D'.
  gs_layout-cwidth_opt  = 'X'.

*-- info_fname
  gs_layout-info_fname  = 'COL'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREATE_OBJ
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_obj .

  CREATE OBJECT go_container
    EXPORTING
      repid     = sy-repid
      dynnr     = sy-dynnr
      side      = go_container->dock_at_left
      extension = 3000.

  CREATE OBJECT go_alv_grid
    EXPORTING
      i_parent = go_container.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit .
  CASE gv_okcode.
    WHEN 'BACK'.
      CALL METHOD : go_alv_grid->free,
                    go_container->free.
      FREE : go_alv_grid, go_container.

      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_FIELD_CATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0408   text
*      -->P_0409   text
*      -->P_0410   text
*----------------------------------------------------------------------*
FORM set_field_catalog  USING  pv_key pv_fieldname pv_text pv_ref_field
                               pv_ref_table pv_emphasize.

  gs_fcat-key       = pv_key.
  gs_fcat-fieldname = pv_fieldname.
  gs_fcat-coltext   = pv_text.
  gs_fcat-ref_field = pv_ref_field.
  gs_fcat-ref_table = pv_ref_table.
  gs_fcat-emphasize = pv_emphasize.
  APPEND gs_fcat TO gt_fcat.
  CLEAR gs_fcat.

ENDFORM.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3.1 - E.G.Mellodew. 1998-2005 UK. Sap Release 750

*&---------------------------------------------------------------------*
*&  Include           ZRBIG20_43F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SET_INIT_VALUE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_init_value .

  p_bukrs = '1000'.
  p_budat = sy-datum.
  p_waers = 'KRW'.
  p_blart = 'SA'.
  p_bktxt = 'Document header text'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXECUTE_BDC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM execute_bdc .

  DATA : lv_amount(13),
  "금액 같은 경우에 CHAR 또는 NUMC 변수에 넣어줍니다.
         lv_message TYPE string. " 메시지를 담아줄 변수


*-- Write format
  WRITE p_dmbtr CURRENCY p_waers TO lv_amount.
  "Char필드에 금액을 정확하게 넣어줌.
  "lv_amount 자리에는 숫자형식 오는 것 불가.

*  WRITE p_quan UNIT p_unit TO lv_amount.
  "수량을 Char 필드에 넣어줌.

*-- Remove sapce
  CONDENSE lv_amount NO-GAPS.
  "13자리의 char이기 때문에 나머지 공백을 지워줄 필요가 있다!!


  CLEAR : gt_bdcdata, gs_bdcdata.
  PERFORM dynpro  USING :
        "Dynbegin "Program(Fnam)  "Dynpro(Fval)
        'X'       'SAPMF05A'      '0100',
        ' '       'BDC_OKCODE'    '/00',
        ' '       'BKPF-BLDAT'     p_budat,
        ' '       'BKPF-BLART'     p_blart,
        ' '       'BKPF-BUKRS'     p_bukrs,
        ' '       'BKPF-BUDAT'     p_budat,
        ' '       'BKPF-MONAT'     p_budat+4(2), "character 쪼갠 것
        ' '       'BKPF-WAERS'     p_waers,
        ' '       'BKPF-BKTXT'     p_bktxt,
        ' '       'RF05A-NEWBS'    '40',
        ' '       'RF05A-NEWKO'    p_hkont1,
        'X'       'SAPMF05A'       '0300',
        ' '       'BDC_OKCODE'     '/00',
        ' '       'BSEG-WRBTR'     lv_amount,
        ' '       'BSEG-SGTXT'     'Debit item',
        ' '       'RF05A-NEWBS'    '50',
        ' '       'RF05A-NEWKO'    p_hkont2,
        'X'       'SAPLKACB'       '0002',
        ' '       'BDC_OKCODE'     '=ENTE',
        ' '       'COBL-GSBER'     p_bukrs,
        'X'       'SAPMF05A'       '0300',
        ' '       'BDC_OKCODE'     '=BU',
        ' '       'BSEG-WRBTR'     lv_amount,
        ' '       'BSEG-SGTXT'     'Credit item',
        'X'       'SAPLKACB'       '0002',
        ' '       'BDC_OKCODE'     '=ENTE',
        ' '       'COBL-GSBER'     p_bukrs.

*-- Set BDC Option
  CLEAR : gs_params.
  gs_params-dismode   = p_mode. "이거는 Parameter로 받아주는게 맞다!
  gs_params-updmode   = 'S'.
  gs_params-racommit  = 'X'.
  gs_params-nobiend   = space.

  CLEAR : gt_messtab[], gt_messtab.
  CALL TRANSACTION 'FB01' USING gt_bdcdata
                          OPTIONS FROM gs_params
                          MESSAGES INTO gt_messtab.
                          "실무에서는 실패했는지 성공했는지가 중요하기 때문에
                          "메시지를 담아줘야 한다.
                          "BDC 수행했을 때의 뜨는 메시지들을 다 담고 있다.


*-- Check success
  "성공일 때 어떠한 메시지 클래스의 어떤 id인가를 일일이 확인해서 성공 여부를 확인한다.
    "혹은 Debugging을 통해 메시지 table을 확인해보면 된다.
  CLEAR : gt_messtab.
  READ TABLE gt_messtab WITH KEY msgnr  = '312'
                                 msgid  = 'F5'.

  IF sy-subrc EQ 0.

    WRITE :/
      icon_led_green,   "Green icon
      gt_messtab-msgv1. "Document number : 전표번호가 msgv1에 있음.

  ELSE.
*-- All message read
    "실패했다면 메시지를 다 읽어줘야 한다.
    LOOP AT gt_messtab.

      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
        EXPORTING
          msgid               = gt_messtab-msgid
          msgnr               = gt_messtab-msgnr
          msgv1               = gt_messtab-msgv1
          msgv2               = gt_messtab-msgv2
          msgv3               = gt_messtab-msgv3
          msgv4               = gt_messtab-msgv4
        IMPORTING
          message_text_output = lv_message.
      "이 스탠다드 펑션이 메시지를 문장으로 만들어 준다

    ENDLOOP.

    WRITE :/ icon_led_red, lv_message.
    "에러가 발생한 지점의 마지막 메시지를 읽는다.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DYNPRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0030   text
*      -->P_0031   text
*      -->P_0032   text
*----------------------------------------------------------------------*
FORM dynpro  USING pv_begin pv_fnam pv_fval.

  CASE pv_begin.
    WHEN 'X'.
      gs_bdcdata-dynbegin = pv_begin.
      gs_bdcdata-program  = pv_fnam.
      gs_bdcdata-dynpro   = pv_fval.
    WHEN OTHERS.
      gs_bdcdata-fnam     = pv_fnam.
      gs_bdcdata-fval     = pv_fval.
  ENDCASE.

  APPEND gs_bdcdata TO gt_bdcdata.
  CLEAR  gs_bdcdata.

ENDFORM.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3.1 - E.G.Mellodew. 1998-2005 UK. Sap Release 750
